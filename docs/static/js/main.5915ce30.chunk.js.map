{"version":3,"sources":["componentes/Formulario.js","componentes/Lista.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","totalCitas","setCitas","useState","id","mascota","dueno","fecha","hora","sintomas","cita","setCita","error","setError","updateState","event","target","name","value","Math","round","random","className","onSubmit","preventDefault","trim","console","log","type","placeholder","onChange","Lista","eliminarCita","onClick","App","citasLocalStorage","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","filter","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5915ce30.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Formulario = ({totalCitas, setCitas}) => {\n\n    //Estado del fomrulario\n    const [cita, setCita] = useState({\n        id: '',\n        mascota: '',\n        dueno: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n    //Estado del error\n    const [error, setError] = useState(false);\n\n    //Funcion actualizar state\n    const updateState = (event) => {\n        setCita({\n            ...cita,\n            [event.target.name]: event.target.value,\n            id: Math.round(Math.random() * 10000)\n        })\n    };\n    //Extraer valores\n    const {mascota, dueno, fecha, hora, sintomas} = cita;\n    //Submit\n\n    const submit = (event) => {\n        \n        event.preventDefault();\n        //Validar\n        if(mascota.trim() === '' || dueno.trim() === '' || fecha.trim() === ''\n        || hora.trim() === '' || sintomas.trim() === ''){\n            console.log(\"Hay un error\");\n            //setCita(true);\n            setError(true);\n            return;\n        }\n        //Paso validacion\n        setError(false);\n        setCitas([...totalCitas, cita]);\n        setCita({\n            id: '',\n            mascota: '',\n            dueno: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        });\n    };\n\n    return(\n       <Fragment>\n           <h2>Crear Cita</h2>\n           {\n               error ? <p className=\"alerta-error\">Los campos son obligatorios</p>\n               : null\n           }\n           <form\n                onSubmit={submit}\n           >\n               <label>Nombre Mascota</label>\n               <input\n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={updateState}\n                    value={mascota}\n               />\n               <label>Nombre Dueño</label>\n               <input\n                    type=\"text\"\n                    name=\"dueno\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Dueño\"\n                    onChange={updateState}\n                    value={dueno}\n               />\n               <label>Fecha</label>\n               <input\n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={updateState}\n                    value={fecha}\n               />\n               <label>Hora</label>\n               <input\n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={updateState}\n                    value={hora}\n               />\n               <label>Sintomas</label>\n               <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={updateState}\n                    value={sintomas}\n               ></textarea>\n               <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n               >Guardar</button>\n           </form>\n       </Fragment>\n    );\n}\n\nFormulario.propTypes = {\n    setCita: PropTypes.func,\n    totalCitas: PropTypes.array\n}\nexport default Formulario;","import React, { Fragment } from 'react'\n\nconst Lista = ({cita, eliminarCita}) => {\n\n\n\n\n    return(\n        <Fragment>\n            <div className=\"cita\">\n                <p>Mascota: <span>{cita.mascota}</span></p>\n                <p>Dueño: <span>{cita.dueno}</span></p>\n                <p>Sintomas: <span>{cita.sintomas}</span></p>\n                <p>Id: <span>{cita.id}</span></p>\n                <button\n                    onClick = {() => eliminarCita(cita.id)}\n                    className = \"button eliminar u-full-width\"\n                >Eliminar</button>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Lista;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './componentes/Formulario'\nimport Lista from './componentes/Lista';\n\nfunction App() {\n\n  //LocalStorage\n  \n  let citasLocalStorage =  JSON.parse(localStorage.getItem('citas'));\n  //Estado de las citas\n  \n  const [totalCitas, setCitas] = useState(citasLocalStorage ? citasLocalStorage : []);\n\n  useEffect(() => {\n    localStorage.setItem('citas', JSON.stringify(totalCitas));\n  }, [totalCitas])\n\n  const eliminarCita = (id) => {\n    setCitas(\n      totalCitas.filter((cita) => {\n        return cita.id !== id;\n      })\n    )\n  };\n\n\n\n  return (\n    <Fragment>\n    <h1>Administrador de pacientes</h1>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"one-half column\">\n          <Formulario\n            totalCitas = {totalCitas}\n            setCitas = {setCitas} \n          />\n        </div>\n        <div className=\"one-half column\">\n          <h2>CITAS TOTALES</h2>\n          {\n            totalCitas.length ?\n            totalCitas.map((cita) => \n              <Lista\n                cita = {cita}\n                key = {cita.id}\n                eliminarCita = {eliminarCita}\n             />\n            )\n            :\n            <h2>No hay citas</h2>\n          }\n        </div>\n      </div>\n    </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}